#Displaying {recipe.title} in App screen

12. set up the array to store whatever we get back from the API
First thing to do is set up empty array (called recipes) 

App.js #13)

state = {
recipes : []
}



13. fill recipes array with data from API : using built in set state method
App.js #32)
this.setstate({recipes : data });

14. Now, console log the newly create state(recipes array)
App.js #38)
console.log(this.state.recipes);


------When we click the search button, we can know that we want specifically data > recipes array not just data to we need to update that part ---

15.  fill recipes array with data.recipes array
this.setstate({recipes: data.recipes);

16. Print recipe list on App screen using Map
 Map : it allows you to go through each element inside of an array
        and then you can manipulate it, change it, and anything you wnat to do with it 
        It's kind of like foreach method.

App.js #64)
 {this.state.recipes.map( (recipe) => {
    return <p> {recipe.titles} </p>
   }
 )};
      
 
 17. Warning : Map method requires 'key' to each of elements
 App.js #66)
 <p key={recipe.recipe_id}> {recipe.title} </o>
 
 
  
